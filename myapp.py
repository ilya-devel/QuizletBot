import telebot
import characters
from os.path import getsize, isfile


def get_token():
    """
    We check the existence of a file with a token and return its value, if it does not exist, we request a token from the user and return it by saving it to a file
    :return: token string
    """
    if isfile('bot.token') and getsize('bot.token') > 10:
        with open('bot.token', 'r') as f:
            return f.read()
    else:
        with open('bot.token', 'w') as f:
            token = input('Enter token for bot: ')
            f.write(token)
            return token


token = get_token()
bot = telebot.TeleBot(token)

users = []


class User:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.status = {
            'is_passing': False,
            'is_passed': False,
            'current_index': -1,
            'answers': []
        }

    def get_result(self):
        lears = sum([1 if (self.status['answers'][x] and x in (5, 23, 35)) or (
                not self.status['answers'][x] and x in (11, 17, 29, 41, 47, 53)) else 0 for x in
                     range(len(self.status['answers']))])
        extra = sum([1 if (self.status['answers'][x] and x in (0, 2, 7, 9, 12, 16, 21, 24, 26, 38, 43, 45, 48, 52)) or (
                not self.status['answers'][x] and x in (4, 14, 19, 28, 31, 33, 36, 40, 50)) else 0 for x in
                     range(len(self.status['answers']))])
        neuro = sum([1 if (self.status['answers'][x] and x in (
            1, 3, 6, 8, 10, 13, 15, 18, 20, 22, 25, 27, 30, 32, 34, 37, 39, 42, 44, 46, 49, 51, 54, 56)) else 0 for x in
                     range(len(self.status['answers']))])
        intro = sum([1 if (self.status['answers'][x] and x in (4, 14, 19, 28, 31, 33, 36, 40, 50)) else 0 for x in
                     range(len(self.status['answers']))])
        return {
            'lear': lears,
            'extravert': extra,
            'introvert': intro,
            'neurotism': neuro
        }

    def get_character(self):
        result = self.get_result()
        text = ''

        if result['lear'] > 4:
            text += f'–ï—Å—Ç—å –Ω–µ–∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–∞—Ö, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—â–∞—è —Ç–∞–∫–∂–µ –æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏' \
                    f' –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ\n '

        ex_in = result['extravert'] - result['introvert']

        if ex_in > 19:
            text += f'–í—ã —è—Ä–∫–∏–π —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç '
        elif ex_in > 15:
            text += f'–í—ã —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç '
        elif ex_in > 12:
            text += f'–£ –≤–∞—Å –µ—Å—Ç—å —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏–∏ '
        elif ex_in == 12:
            text += f'–£ –≤–∞—Å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç–æ–º –∏ –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç–æ–º '
        elif ex_in > 9:
            text += f'–£ –≤–∞—Å —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Å–∏–∏ '
        elif ex_in > 5:
            text += f'–í—ã –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç '
        elif ex_in < 5:
            text += f'–í—ã –≥–ª—É–±–æ–∫–∏–π –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç '

        if result['neurotism'] > 19:
            text += f'+ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞\n'
        elif result['neurotism'] > 13:
            text += f'+ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞\n'
        elif 9 <= result['neurotism'] <= 13:
            text += f'+ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞\n'
        elif result['neurotism'] < 9:
            text += f'+ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–π—Ä–æ—Ç–∏–∑–º–∞\n'

        text += '\n–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∞—à–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:\n\n'
        if (9 <= result['neurotism'] <= 13) and (ex_in == 12):
            text += '–í–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∑–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞, –∞ –∑–Ω–∞—á–∏—Ç –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —á–µ—Ä—Ç—ã –≤—Å–µ—Ö —á–µ—Ç—ã—Ä—ë—Ö —Ç–∏–ø–æ–≤ (—Å–∞–≥–≤–∏–Ω–∏–∫–∞, ' \
                    '—Ö–æ–ª–µ—Ä–∏–∫–∞, —Ñ–ª–µ–≥–º–∞—Ç–∏–∫–∞ –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏–∫–∞) '
        elif (result['neurotism'] < 13) and (ex_in > 12):
            text += characters.characters['holer']
        elif (result['neurotism'] > 9) and (ex_in > 12):
            text += characters.characters['sang']
        elif (result['neurotism'] < 13) and (ex_in < 12):
            text += characters.characters['melan']
        elif (result['neurotism'] > 9) and (ex_in < 12):
            text += characters.characters['flegm']

        return text


class DataBase:
    def __init__(self):
        global users
        self.users = users
        self.questions = []
        with open('question_list.txt', 'r') as f:
            self.questions = [x.strip() for x in f.readlines()]
        self.questions_count = len(self.questions)

    def get_user(self, chat_id):
        for user in self.users:
            if user.chat_id == chat_id:
                return user
        user = User(chat_id)
        self.users.append(user)
        return user

    def set_user(self, chat_id, **kwargs):
        for user in self.users:
            if user.chat_id == chat_id:
                for key in kwargs.keys():
                    user.status[key] = kwargs[key]

    def get_question(self, index):
        return self.questions[index]


db = DataBase()


@bot.message_handler(commands=['start'])
def start(message):
    user = db.get_user(message.chat.id)
    # if user.status['is_passed']:
    #     bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è üò•")
    #     return

    if user.status['is_passing']:
        return

    db.set_user(message.chat.id, current_index=0, is_passing=True)
    post = get_question_message(user)
    if post is not None:
        bot.send_message(message.chat.id, post['text'], reply_markup=post['keyboard'])


@bot.callback_query_handler(func=lambda query: query.data.startswith('?ans&'))
def answered(query):
    user = db.get_user(query.message.chat.id)
    if user.status['is_passed'] or not user.status['is_passing']:
        return

    user.status['answers'].append(True if query.data.split('&')[1] == '–î–∞' else False)

    post = get_answered_message(user)
    if post is not None:
        bot.edit_message_text(post['text'], query.message.chat.id, query.message.id, reply_markup=post['keyboard'])


@bot.callback_query_handler(func=lambda query: query.data == '?next')
def next(query):
    user = db.get_user(query.message.chat.id)
    if user.status['is_passed'] or not user.status['is_passing']:
        return
    user.status['current_index'] += 1

    post = get_question_message(user)
    if post is not None:
        bot.edit_message_text(post['text'], query.message.chat.id, query.message.id, reply_markup=post['keyboard'])


def get_question_message(user: User):
    if user.status['current_index'] == db.questions_count:
        result = user.get_character()
        db.set_user(user.chat_id, is_passed=True, is_passing=False)
        return {'text': result, 'keyboard': None}
    question = db.get_question(user.status['current_index'])
    if question is None:
        return
    keyboard = telebot.types.InlineKeyboardMarkup()
    for ans in ['–î–∞', '–ù–µ—Ç']:
        keyboard.row(telebot.types.InlineKeyboardButton(f'{ans}', callback_data=f'?ans&{ans}'))

    text = f'–í–æ–ø—Ä–æ—Å ‚Ññ{user.status["current_index"] + 1}\n\n{question}'
    return {
        'text': text,
        'keyboard': keyboard
    }


def get_answered_message(user: User):
    question = db.get_question(user.status['current_index'])
    text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user.status['current_index'] + 1}\n\n{question}\n" \
           f"–í–∞—à –æ—Ç–≤–µ—Ç: {'–î–∞' if user.status['answers'][user.status['current_index']] == True else '–ù–µ—Ç'}"

    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='?next'))
    return {
        'text': text,
        'keyboard': keyboard
    }


bot.polling()
